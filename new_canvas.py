# Form implementation generated from reading ui file 'new_canvas.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from numpy import random 

class Ui_graph(object):
    def setupUi(self, graph):
        graph.setObjectName("graph")
        graph.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=graph)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_3 = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(parent=self.frame_3)
        self.label.setStyleSheet("QLabel{\n"
"background-color : rgb(0, 255, 0);\n"
"color : rgb(170, 0, 0);\n"
"font: 14pt \"Sans Serif\";\n"
"text-decoration: underline;}")
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.verticalLayout.addWidget(self.frame_3)
        self.frame_2 = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout.addWidget(self.frame_2)
        #create a horizontal layout
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        ##canvas here
        self.figure = plt.figure()
        self.canvas= FigureCanvas(self.figure)
        ##end of Canvas 
        ##add canvas
        self.horizontalLayout_2.addWidget(self.canvas)
        ##end of horizontal layout 
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(parent=self.frame, clicked = lambda: self.plotOnCanvas())
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setStyleSheet("QPushButton{\n"
"background-color : rgb(0, 255, 0);\n"
"color : rgb(170, 0, 0);\n"
"font: 14pt \"Sans Serif\";\n"
"text-decoration: underline;}")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout.addWidget(self.frame)
        graph.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=graph)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 19))
        self.menubar.setObjectName("menubar")
        graph.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=graph)
        self.statusbar.setObjectName("statusbar")
        graph.setStatusBar(self.statusbar)

        self.retranslateUi(graph)
        QtCore.QMetaObject.connectSlotsByName(graph)

    def retranslateUi(self, graph):
        _translate = QtCore.QCoreApplication.translate
        graph.setWindowTitle(_translate("graph", "graph"))
        self.label.setText(_translate("graph", "plot to be displayed here"))
        self.pushButton.setText(_translate("graph", "click to plot "))
    
    def plotOnCanvas(self):
        #clear the canvas 
        self.figure.clear()

        scale =['low','medium','high','critical']
        values =  random.randint(50,size=(4))
        print(values)
        #crewate bar plot 
        plt.bar(scale,values,color ='red',width = 0.4)

        plt.xlabel("Theart Severity")
        plt.ylabel("Frequency")
        plt.title('THREATS FOUND')
        #refresh canvas
        self.canvas.draw()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    graph = QtWidgets.QMainWindow()
    ui = Ui_graph()
    ui.setupUi(graph)
    graph.show()
    sys.exit(app.exec())
